#!/bin/bash
# Copyright (c) 2022 Madalin Grigore-Enescu
# GEM Bash Shell Library (gembsl) 
# gembsl is a small bash script that acts as a library for other bash scripts

######################################################
## Constants and other Environment Variable Names
######################################################

# Escape sequence and resets
GEM_SC_ESC="\033["
GEM_SC_RESET_ALL="\033[m"
# Foreground colours
GEM_SC_FG_BLACK="${GEM_SC_ESC}30m"
GEM_SC_FG_RED="${GEM_SC_ESC}31m"
GEM_SC_FG_GREEN="${GEM_SC_ESC}32m"
GEM_SC_FG_YELLOW="${GEM_SC_ESC}33m"
GEM_SC_FG_BLUE="${GEM_SC_ESC}34m"
GEM_SC_FG_MAGENTA="${GEM_SC_ESC}35m"
GEM_SC_FG_CYAN="${GEM_SC_ESC}36m"
GEM_SC_FG_WHITE="${GEM_SC_ESC}37m"
GEM_SC_FG_BOLD="${GEM_SC_ESC}1m"
GEM_SC_FG_ITALIC="${GEM_SC_ESC}3m"
GEM_SC_FG_UNDERLINE="${GEM_SC_ESC}4m"
GEM_SC_FG_BLINKING="${GEM_SC_ESC}5m"
GEM_SC_FG_INVERTED="${GEM_SC_ESC}7m"

######################################################
## functions
######################################################

##====================================================
## gem_echo
##====================================================

# Repeat given string the specified number of times
gem_echo_repeat() {
    local l_range
    local l_i
	l_range=$(seq 1 "$1")
	for l_i in $l_range ; do echo -n "$2"; done
}

gem_echo_red() {
    echo -e "${GEM_SC_FG_RED}${1}${GEM_SC_RESET_ALL}"
}
gem_echo_green() {
    echo -e "${GEM_SC_FG_GREEN}${1}${GEM_SC_RESET_ALL}"
}
gem_echo_yellow() {
    echo -e "${GEM_SC_FG_YELLOW}${1}${GEM_SC_RESET_ALL}"
}
gem_echo_blue() {
    echo -e "${GEM_SC_FG_BLUE}${1}${GEM_SC_RESET_ALL}"
}
gem_echo_magenta() {
    echo -e "${GEM_SC_FG_MAGENTA}${1}${GEM_SC_RESET_ALL}"
}
gem_echo_cyan() {
    echo -e "${GEM_SC_FG_cyan}${1}${GEM_SC_RESET_ALL}"
}

gem_echo_h1() {
  echo -e "\n${GEM_SC_FG_INVERTED}${1}${GEM_SC_RESET_ALL}"
}
gem_echo_h2() {
  echo -e "\n${GEM_SC_FG_UNDERLINE}${1}${GEM_SC_RESET_ALL}"
}
gem_echo_h3() {
  echo -e "\n${GEM_SC_FG_ITALIC}${1}${GEM_SC_RESET_ALL}"
}

gem_echo_success() {
    gem_echo_green "\n$1"
}

gem_echo_panic() {
    gem_echo_red "\n$1"
    exit 1
}

gem_echo_error() {
    gem_echo_red "\n$1"
}

gem_echo_warning() {
    gem_echo_yellow "\n$1"
}

##====================================================
## gem_string
##====================================================

gem_string_beginswith() { 
    case $2 in "$1"*) true;; *) false;; esac; 
}

gem_string_explode() {
    local l
    l=$(echo "$1" | tr "$2" "\n")
    GEM_FUNC_RESULT=$(echo "$l")
}

gem_string_lower() {
    GEM_FUNC_RESULT=$(echo "$1" | tr -s "[:upper:]" "[:lower:]")
}

gem_string_upper() {
    GEM_FUNC_RESULT=$(echo "$1" | tr -s "[:upper:]" "[:lower:]")
}

gem_string_replace_all() {
    GEM_FUNC_RESULT=${1//$2/$3}
}

##====================================================
## gem_random
##====================================================

# Generates a uniformly-distributed unsigned 30-bit integer in the specified interval
gem_random_int30() {
    if [ -z "$1" ]; then
        GEM_FUNC_RESULT=$(( (RANDOM<<15)|RANDOM ))
    else
        if [ -z "$2" ]; then
            GEM_FUNC_RESULT=$(( ((RANDOM<<15)|RANDOM) % "$1" + 0 ))
        else
            GEM_FUNC_RESULT=$(( ((RANDOM<<15)|RANDOM) % "$2" + "$1" ))
        fi
    fi
}

# Generates a random string from the specified set of characters 
# of the specified length.
# Globals:
#   None
# Arguments:
#   1 - String containing set of characters to use
#   2 - Length of the string to generate
# Outputs:
#   None
# Returns:
#   The string generated
gem_random_string() {
    GEM_FUNC_RESULT=$(cat /dev/urandom | tr -dc "$1" | fold -w "$2" | head -n 1)
}

# Generates a random alphanumeric string.
# Globals:
#   None
# Arguments:
#   1 - Length of the string to generate
# Outputs:
#   None
# Returns:
#   The string generated
gem_random_alphanumeric() {
    gem_random_string 'a-zA-Z0-9' "$1"
}

# Generates a random lowercase alphanumeric string.
# Globals:
#   None
# Arguments:
#   1 - Length of the string to generate
# Outputs:
#   None
# Returns:
#   The string generated
gem_random_lowercase_alphanumeric() {
    gem_random_string 'a-z0-9' "$1"
}

# Generates a random lowercase alpha string
# Globals:
#   None
# Arguments:
#   Length of the string to generate
# Outputs:
#   None
# Returns:
#   The string generated
gem_random_lowercase_alpha() {
    gem_random_string 'a-z' "$1"
}

# Generates a random uppercase alphanumeric string
# Globals:
#   None
# Arguments:
#   Length of the string to generate
# Outputs:
#   None
# Returns:
#   The string generated
gem_random_uppercase_alphanumeric() {
    gem_random_string 'A-Z0-9' "$1"
}

# Generates a random uppercase alpha string
# Globals:
#   None
# Arguments:
#   Length of the string to generate
# Outputs:
#   None
# Returns:
#   The string generated
gem_random_uppercase_alpha() {
    gem_random_string 'A-Z' "$1"
}

# Generates a random string containing a unique (time based) numeric value
# Globals:
#   None
# Arguments:
#   None
# Outputs:
#   None
# Returns:
#   The string generated
gen_random_string_time_based() {
    GEM_FUNC_RESULT=$(date +"%m%d%Y%H%M%S%N")
}

##====================================================
## gem_file
##====================================================

gem_file_setup_path_tmp() {
    if [[ -z "$GEM_PATH_TMP" ]]; then
        GEM_PATH_TMP_PREFIX="gem"
    fi
    if [[ -z "$GEM_PATH_TMP" ]]; then
        GEM_PATH_TMP=$(mktemp -d -t "${GEM_PATH_TMP_PREFIX}-XXXXXXXXXX")
    fi
    if [[ ! -d "$GEM_PATH_TMP" ]]; then
        mkdir -p "$GEM_PATH_TMP"
    fi
}

## Create a unique temporary file name
gem_file_tmp_name() {
    gem_file_setup_path_tmp
    gem_random_int30 16 128
    gem_random_lowercase_alphanumeric $GEM_FUNC_RESULT
    GEM_FUNC_RESULT="${GEM_PATH_TMP}/${GEM_FUNC_RESULT}.tmp"
}

## Replace string in a file
gem_file_replace_string() {
    gem_file_tmp_name
    sed "s/$2/$3/g" "$1" > "$GEM_FUNC_RESULT" && mv "$GEM_FUNC_RESULT" "$1"
}

## Read the specified file content
gem_file_read_content() {
    echo "Reading file $1"
    GEM_FUNC_RESULT=`head -n 1 "$1"`
    if [[ "${GEM_FUNC_RESULT}" = "" ]]; then
        gem_echo_panic "Failed reading the $1 file!"
    else
        echo "File successfully read."
    fi
}

##====================================================
## gem_assert
##====================================================

# Assert the specified directory exists
gem_assert_file_exist() {
    if [ ! -f "$1" ]; then
        gem_echo_panic "File $1 does not exist! Aborting..."
    fi
}

# Assert the specified directory exists
gem_assert_directory_exist() {
    if [ ! -d "$1" ]; then
        gem_echo_panic "Directory $1 does not exist! Aborting..."
    fi
}

##====================================================
## gem_erlang
##====================================================

# Generates a random erlang short node name
# Globals:
#   None
# Arguments:
#   None
# Outputs:
#   None
# Returns:
#   The string generated
gem_erlang_random_short_node_name() {
    local l_alpha
    gem_random_lowercase_alpha 6
    l_alpha=$GEM_FUNC_RESULT
    gen_random_string_time_based
    GEM_FUNC_RESULT="${l_alpha}${GEM_FUNC_RESULT}"
}

##====================================================
## gem_command
##====================================================

# Check to see if the specified shell command exist
gem_command_exist() {
    local l
    l=$(command -v "$1")
    if [ -x "$l" ]; then
        GEM_FUNC_RESULT=true
    else
        GEM_FUNC_RESULT=false
    fi
}

##====================================================
## gem_net
##====================================================

# Download the specified url using curl (prefered method) or wget
gem_net_download_url() {
    local l_url
    if [ -z "$1" ]; then
        gem_echo_panic "gem_net_download_url: Invalid parameter 1 (url)"
    fi
    if [ -z "$2" ]; then
        gem_echo_panic "gem_net_download_url: Invalid parameter 2 (output file)"
    fi    
    ## Fix for working with spaces in URL
    gem_string_replace_all "$1" " " "%20"
    l_url=$GEM_FUNC_RESULT
    if [ -x "$(command -v curl)" ]; then
        GEM_FUNC_RESULT=$(curl -o "${2}" "${l_url}")
    else 
        if [ -x "$(command -v wget)" ]; then
            GEM_FUNC_RESULT=$(wget -O "${2}" "${l_url}")
        else
            gem_echo_panic "curl or wget are not available! 
            Please install either curl or wget or download '${1}' to output '${2}' manually!"
        fi
    fi
}

# Download the specified url if output file does not exist otherwise do nothing
gem_net_download_url_if_file_not_found() {
    if [ ! -f "$2" ]; then
        echo "File $2 does not exist. Downloading from ${1}..."
        gem_net_download_url "$1" "$2"
    fi
}

##====================================================
## gem_environment
##====================================================

# Detect environment
gem_environment_detect() {
    gem_string_lower $(uname)
    GEM_OS_NAME=$GEM_FUNC_RESULT
    gem_string_lower $(uname -r)
	GEM_OS_KERNEL=$GEM_FUNC_RESULT
    gem_string_lower $(uname -m)
	GEM_OS_MACHINE_HARDWARE_NAME=$GEM_FUNC_RESULT
    GEM_OS_BASED_ON='unknown'    
    GEM_OS_RELEASE='unknown'
    if [ "$GEM_OS_NAME" = "linux" ] ; then
        if [ -f /etc/redhat-release ] ; then
			GEM_OS_BASED_ON='redhat'
			GEM_OS_DISTRO_ID=$(cat /etc/redhat-release |sed s/\ release.*//)
			GEM_OS_DISTRO_CODENAME=$(cat /etc/redhat-release | sed s/.*\(// | sed s/\)//)
			GEM_OS_RELEASE=$(cat /etc/redhat-release | sed s/.*release\ // | sed s/\ .*//)
		elif [ -f /etc/debian_version ] ; then
			GEM_OS_BASED_ON='debian'
			if [ -f /etc/lsb-release ] ; then
		       	GEM_OS_DISTRO_ID=$(cat /etc/lsb-release | grep '^DISTRIB_ID' | awk -F=  '{ print $2 }')
			    GEM_OS_DISTRO_CODENAME=$(cat /etc/lsb-release | grep '^DISTRIB_CODENAME' | awk -F=  '{ print $2 }')
			    GEM_OS_RELEASE=$(cat /etc/lsb-release | grep '^DISTRIB_RELEASE' | awk -F=  '{ print $2 }')
            fi            
		elif [ -f /etc/SuSE-release ] ; then
			GEM_OS_BASED_ON='suse'
			GEM_OS_DISTRO_CODENAME=$(cat /etc/SuSE-release | tr "\n" ' '| sed s/VERSION.*//)
			GEM_OS_RELEASE=$(cat /etc/SuSE-release | tr "\n" ' ' | sed s/.*=\ //)
		elif [ -f /etc/mandrake-release ] ; then
			GEM_OS_BASED_ON='mandrake'
			GEM_OS_DISTRO_CODENAME=$(cat /etc/mandrake-release | sed s/.*\(// | sed s/\)//)
			GEM_OS_RELEASE=$(cat /etc/mandrake-release | sed s/.*release\ // | sed s/\ .*//)
		fi
    else
        gem_echo_warning "Untested OS. Good luck running gembsl!"
	fi
}

# Display information about GEM defined environment variables
gem_environment_display() {
    gem_echo_h2 "GEM environment variables:"
    echo "$GEM_OS_NAME"
    echo "$GEM_OS_KERNEL"
    echo "$GEM_OS_MACHINE_HARDWARE_NAME"
    echo "$GEM_OS_BASED_ON"
    echo "$GEM_OS_DISTRO_ID"
    echo "$GEM_OS_DISTRO_CODENAME"
    echo "$GEM_OS_RELEASE"
}

######################################################

gem_environment_detect
gem_environment_display


